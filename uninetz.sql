CREATE TABLE uninetz.UNIVERSITY (
	ID SERIAL,
	NAME VARCHAR(256) NOT NULL,
	COUNTRY VARCHAR(256) NOT NULL,
	STATE VARCHAR(256) NOT NULL,
	CITY VARCHAR(256) NOT NULL,
	PRIMARY KEY (ID)
);

CREATE TABLE uninetz.PROFESSOR (
	ID SERIAL,
	NAME VARCHAR(256) NOT NULL,
	UNIVERSITY_ID INT NOT NULL,
	FOREIGN KEY (UNIVERSITY_ID) REFERENCES UNIVERSITY(ID),
	PRIMARY KEY (ID)
);

CREATE TABLE uninetz.COURSE (
	ID SERIAL,
	NAME VARCHAR(256) NOT NULL,
	YEAR CHAR(4) NOT NULL,
	DESCRIPTION TEXT,
	PROJECTS_START_DATE DATE NOT NULL,
	PROJECTS_END_DATE DATE NOT NULL,
	UNIVERSITY_ID INT NOT NULL,
	PROFESSOR_ID INT NOT NULL,
	FOREIGN KEY (UNIVERSITY_ID) REFERENCES UNIVERSITY(ID),
	FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR(ID),
	PRIMARY KEY (ID)
);

CREATE TABLE uninetz.PROJECT (
	ID SERIAL,
	TITLE VARCHAR(256) NOT NULL,
	SUMMARY TEXT,
	DETAILS TEXT,
	BLOG_URL VARCHAR(256),
	COURSE_ID INT NOT NULL,
	FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID),
	PRIMARY KEY (ID)
);

CREATE TABLE uninetz.COMPANY (
	ID SERIAL,
	NAME VARCHAR(256) NOT NULL,
	URL VARCHAR(256),
	LOGO_URL VARCHAR(256),
	PRIMARY KEY (ID)
);


CREATE TABLE uninetz.SKILL (
	ID SERIAL,
	NAME VARCHAR(256) NOT NULL,
	CATEGORY VARCHAR(256) NOT NULL,
	PRIMARY KEY (ID)
);

CREATE TABLE uninetz.STUDENT (
	ID SERIAL,
	NAME VARCHAR(256) NOT NULL,
	DOB DATE NOT NULL,
	LINKEDIN_URL VARCHAR(256),
	GITHUB_URL VARCHAR(256),
	STACKOVERFLOW_URL VARCHAR(256),
	START_DATE DATE NOT NULL,
	UNIVERSITY_ID INT NOT NULL,
	FOREIGN KEY (UNIVERSITY_ID) REFERENCES UNIVERSITY(ID),
	PRIMARY KEY (ID)
);

CREATE TABLE uninetz.STUDENT_SKILL (
	RATING INT NOT NULL,
	STUDENT_ID INT NOT NULL,
	SKILL_ID INT NOT NULL,
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
	FOREIGN KEY (SKILL_ID) REFERENCES SKILL(ID)
);

CREATE TABLE uninetz.COURSE_SKILL (
	STUDENT_ID INT NOT NULL,
	SKILL_ID INT NOT NULL,
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
	FOREIGN KEY (SKILL_ID) REFERENCES SKILL(ID)
);

CREATE TABLE uninetz.COMPANY_SKILL (
	COMPANY_ID INT NOT NULL,
	SKILL_ID INT NOT NULL,
	FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID),
	FOREIGN KEY (SKILL_ID) REFERENCES SKILL(ID)
);

CREATE TABLE uninetz.PROJECT_SKILL (
	PROJECT_ID INT NOT NULL,
	SKILL_ID INT NOT NULL,
	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(ID),
	FOREIGN KEY (SKILL_ID) REFERENCES SKILL(ID)
);

CREATE TABLE uninetz.STUDENT_COURSE (
	STUDENT_ID INT NOT NULL,
	COURSE_ID INT NOT NULL,
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
	FOREIGN KEY (COURSE_ID) REFERENCES COURSE(ID)
);

CREATE TABLE uninetz.STUDENT_PROJECT (
	STUDENT_ID INT NOT NULL,
	PROJECT_ID INT NOT NULL,
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(ID)
);

CREATE TABLE uninetz.COMPANY_PROJECT (
	ACCEPTED BOOLEAN,
	COMPANY_ID INT NOT NULL,
	PROJECT_ID INT NOT NULL,
	FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID),
	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(ID)
);


CREATE TABLE uninetz.ACCOUNT (
	ID SERIAL,
	USERNAME VARCHAR(256) NOT NULL,
	PASSWORD CHAR(60) NOT NULL,
	ROLE VARCHAR(64) NOT NULL,
	COMPANY_ID INT,
	STUDENT_ID INT,
	PROFESSOR_ID INT,
	FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID),
	FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(ID),
	FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSOR(ID)
);